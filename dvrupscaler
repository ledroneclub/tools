#!/bin/bash

################################################################################
# dvrupscaler - a DVR file upscaling script for social media video adaptation
# -> scales video to 1920x1080, converts to h264, nulls the audio track or uses 
# an mp3 audio file specified with the -a(udio) option. Should use the 
# -s(hortest) parameter # if your audio file is longer than the video.
# 
# Author : A.Arvinte (ledrone.club) - Aug 2019
# https://github.com/ledroneclub/tools
################################################################################

# Reset in case getopts has been used previously in the shell.
OPTIND=1 
# Initialize our variables
vfile=""
afile=""
verbose=0
shortest=0
keepaudio=0

logparams="-loglevel quiet -stats"
shortparams=""
audiosource="-f lavfi -i anullsrc"
map="-map 0:a -map 1:v"

while getopts "h?vf:a:s:k" opt; do
    case "$opt" in
    h|\?)
        echo "dvrupscaler -f video_file [â€“a audio_file] [-v:verbose] [-s:shorten to shortest input file]"
        exit 0
        ;;
    v)  verbose=1
        ;;
    a)  afile=$OPTARG
        audiosource="-i $afile"
        ;;
    f)  vfile=$OPTARG
        ;;
    s)  shortest=1
        ;;
    k)  keepaudio=1
        ;;
    esac
done

if [ $verbose -eq 1 ]; then
    logparams=""
fi

if [ $shortest -eq 1 ] || [ -z $afile ]; then
    shortparams="-shortest"
fi

if [ $keepaudio -eq 1 ]; then
    audiosource=""
    map=""
fi    

shift $((OPTIND-1))
[ "${1:-}" = "--" ] && shift

file_pwd=$(dirname "${vfile}")
file_name_full=$(basename -- "$vfile")
file_ext="${file_name_full##*.}"
file_name="${file_name_full%.*}"
file_out=$file_pwd/${file_name}_upscaled.mp4

echo "Will encode $vfile to $file_out"

ffmpeg $logparams $audiosource -i $vfile \
    -pix_fmt yuv420p -c:v libx264 -b:v 8M \
    -vf "scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2,setsar=1" \
    -c:a aac $map $shortparams $file_out
